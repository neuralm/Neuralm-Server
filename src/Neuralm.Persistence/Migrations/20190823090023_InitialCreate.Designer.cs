// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neuralm.Persistence.Contexts;

namespace Neuralm.Persistence.Migrations
{
    [DbContext(typeof(NeuralmDbContext))]
    [Migration("20190823090023_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CredentialTypeId");

                    b.Property<string>("Extra");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Secret")
                        .HasMaxLength(1024);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CredentialTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.CredentialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("Position");

                    b.HasKey("Id");

                    b.ToTable("CredentialTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Name",
                            Name = "Name",
                            Position = 1
                        });
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("Position");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("Position");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.RolePermission", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("PermissionId");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<Guid?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Nodes.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<uint>("Layer");

                    b.Property<uint>("NodeIdentifier");

                    b.HasKey("Id");

                    b.ToTable("Node");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Node");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Organism", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Evaluated");

                    b.Property<uint>("Generation");

                    b.Property<bool>("Leased");

                    b.Property<string>("Name");

                    b.Property<double>("Score");

                    b.Property<Guid?>("SpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Organism");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.OrganismInputNode", b =>
                {
                    b.Property<Guid>("OrganismId");

                    b.Property<Guid>("InputNodeId");

                    b.HasKey("OrganismId", "InputNodeId");

                    b.HasIndex("InputNodeId");

                    b.ToTable("OrganismInputNode");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.OrganismOutputNode", b =>
                {
                    b.Property<Guid>("OrganismId");

                    b.Property<Guid>("OutputNodeId");

                    b.HasKey("OrganismId", "OutputNodeId");

                    b.HasIndex("OutputNodeId");

                    b.ToTable("OrganismOutputNode");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("SpeciesScore");

                    b.Property<Guid?>("TrainingRoomId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingRoomId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.TrainingRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<uint>("Generation");

                    b.Property<uint>("HighestInnovationNumber");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TrainingRooms");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.TrainingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndedTimestamp");

                    b.Property<DateTime>("StartedTimestamp");

                    b.Property<Guid>("TrainingRoomId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingRoomId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimestampCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Nodes.InputNode", b =>
                {
                    b.HasBaseType("Neuralm.Domain.Entities.NEAT.Nodes.Node");

                    b.HasDiscriminator().HasValue("InputNode");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Nodes.OutputNode", b =>
                {
                    b.HasBaseType("Neuralm.Domain.Entities.NEAT.Nodes.Node");

                    b.HasDiscriminator().HasValue("OutputNode");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.Credential", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.Authentication.CredentialType", "CredentialType")
                        .WithMany("Credentials")
                        .HasForeignKey("CredentialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Neuralm.Domain.Entities.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.RolePermission", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.Authentication.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Neuralm.Domain.Entities.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.Authentication.UserRole", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Neuralm.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Organism", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.NEAT.Species")
                        .WithMany("Organisms")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Neuralm.Domain.Entities.NEAT.ConnectionGene", "ConnectionGenes", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<bool>("Enabled");

                            b1.Property<uint>("InNodeIdentifier");

                            b1.Property<uint>("InnovationNumber");

                            b1.Property<Guid>("OrganismId");

                            b1.Property<uint>("OutNodeIdentifier");

                            b1.Property<double>("Weight");

                            b1.HasKey("Id");

                            b1.HasIndex("OrganismId");

                            b1.ToTable("ConnectionGenes");

                            b1.HasOne("Neuralm.Domain.Entities.NEAT.Organism")
                                .WithMany("ConnectionGenes")
                                .HasForeignKey("OrganismId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.OrganismInputNode", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.NEAT.Nodes.InputNode", "InputNode")
                        .WithMany("OrganismInputNodes")
                        .HasForeignKey("InputNodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Neuralm.Domain.Entities.NEAT.Organism", "Organism")
                        .WithMany("Inputs")
                        .HasForeignKey("OrganismId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.OrganismOutputNode", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.NEAT.Organism", "Organism")
                        .WithMany("Outputs")
                        .HasForeignKey("OrganismId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Neuralm.Domain.Entities.NEAT.Nodes.OutputNode", "OutputNode")
                        .WithMany("OrganismOutputNodes")
                        .HasForeignKey("OutputNodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.Species", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.NEAT.TrainingRoom")
                        .WithMany("Species")
                        .HasForeignKey("TrainingRoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.TrainingRoom", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.User", "Owner")
                        .WithMany("TrainingRooms")
                        .HasForeignKey("OwnerId");

                    b.OwnsMany("Neuralm.Domain.Entities.NEAT.Trainer", "AuthorizedTrainers", b1 =>
                        {
                            b1.Property<Guid>("TrainingRoomId");

                            b1.Property<Guid>("UserId");

                            b1.HasKey("TrainingRoomId", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("Trainers");

                            b1.HasOne("Neuralm.Domain.Entities.NEAT.TrainingRoom", "TrainingRoom")
                                .WithMany("AuthorizedTrainers")
                                .HasForeignKey("TrainingRoomId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Neuralm.Domain.Entities.User", "User")
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Neuralm.Domain.Entities.NEAT.TrainingRoomSettings", "TrainingRoomSettings", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<double>("AddConnectionChance");

                            b1.Property<double>("AddNodeChance");

                            b1.Property<double>("CrossOverChance");

                            b1.Property<double>("EnableConnectionChance");

                            b1.Property<uint>("InputCount");

                            b1.Property<double>("InterSpeciesChance");

                            b1.Property<double>("MutateWeightChance");

                            b1.Property<double>("MutationChance");

                            b1.Property<uint>("OrganismCount");

                            b1.Property<uint>("OutputCount");

                            b1.Property<int>("Seed");

                            b1.Property<double>("SpeciesAverageWeightDiffWeight");

                            b1.Property<double>("SpeciesDisjointGeneWeight");

                            b1.Property<double>("SpeciesExcessGeneWeight");

                            b1.Property<double>("Threshold");

                            b1.Property<double>("TopAmountToSurvive");

                            b1.Property<double>("WeightReassignChance");

                            b1.HasKey("Id");

                            b1.ToTable("TrainingRoomSettings");

                            b1.HasOne("Neuralm.Domain.Entities.NEAT.TrainingRoom")
                                .WithOne("TrainingRoomSettings")
                                .HasForeignKey("Neuralm.Domain.Entities.NEAT.TrainingRoomSettings", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Neuralm.Domain.Entities.NEAT.TrainingSession", b =>
                {
                    b.HasOne("Neuralm.Domain.Entities.NEAT.TrainingRoom", "TrainingRoom")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TrainingRoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Neuralm.Domain.Entities.NEAT.LeasedOrganism", "LeasedOrganisms", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTime>("LeaseEnd");

                            b1.Property<DateTime>("LeaseStart");

                            b1.Property<Guid>("OrganismId");

                            b1.Property<Guid>("TrainingSessionId");

                            b1.HasKey("Id");

                            b1.HasIndex("TrainingSessionId");

                            b1.ToTable("LeasedOrganisms");

                            b1.HasOne("Neuralm.Domain.Entities.NEAT.TrainingSession")
                                .WithMany("LeasedOrganisms")
                                .HasForeignKey("TrainingSessionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
